name: 🚀 Publish Trigger.dev Docker

on:
  push:
    branches:
      - main
    tags:
      - "v*"
  pull_request:
    branches:
      - main

permissions:
  id-token: write
  packages: write
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}

env:
  AWS_REGION: us-east-1

jobs:
  typecheck:
    name: ʦ TypeScript
    runs-on: buildjet-4vcpu-ubuntu-2204
    steps:
      - name: ⬇️ Checkout repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: ⎔ Setup pnpm
        uses: pnpm/action-setup@v2.2.4
        with:
          version: 7.18

      - name: ⎔ Setup node
        uses: buildjet/setup-node@v3
        with:
          node-version: 18
          cache: "pnpm"

      - name: 📥 Download deps
        run: pnpm install --frozen-lockfile

      - name: 📀 Generate Prisma Client
        run: pnpm run generate

      - name: 🔎 Type check
        run: pnpm run typecheck --filter webapp

  publish:
    needs: [typecheck]
    runs-on: buildjet-4vcpu-ubuntu-2204
    steps:
      - name: ⬇️ Checkout repo
        uses: actions/checkout@v3

      - name: 🐳 Build Docker Image
        run: |
          docker build -t release_build_image -f ./docker/Dockerfile .

      - name: 🐙 Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🐙 Push to GitHub Container Registry
        run: |
          docker tag release_build_image $REGISTRY/$REPOSITORY:$IMAGE_TAG
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
        env:
          REGISTRY: ghcr.io/triggerdotdev
          REPOSITORY: trigger.dev
          IMAGE_TAG: main

      - name: 🌐 Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: 🌐 Login to ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v1

      - name: 🌐 Push to Amazon ECR
        run: |
          docker tag release_build_image $REGISTRY/$REPOSITORY:$IMAGE_TAG
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
        env:
          REGISTRY: ${{ steps.ecr-login.outputs.registry }}
          REPOSITORY: trigger.dev
          IMAGE_TAG: main
