name: 🚀 Publish Trigger.dev Docker

on:
  push:
    branches:
      - main
    tags:
      - "v*"

permissions:
  id-token: write
  packages: write
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}

env:
  AWS_REGION: us-east-1

jobs:
  typecheck:
    name: ʦ TypeScript
    runs-on: buildjet-4vcpu-ubuntu-2204
    steps:
      - name: ⬇️ Checkout repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: ⎔ Setup pnpm
        uses: pnpm/action-setup@v2.2.4
        with:
          version: 7.18

      - name: ⎔ Setup node
        uses: buildjet/setup-node@v3
        with:
          node-version: 18
          cache: "pnpm"

      - name: 📥 Download deps
        run: pnpm install --frozen-lockfile

      - name: 📀 Generate Prisma Client
        run: pnpm run generate

      - name: 🔎 Type check
        run: pnpm run typecheck --filter webapp

  publish:
    needs: [typecheck]
    runs-on: buildjet-4vcpu-ubuntu-2204
    outputs:
      version: ${{ steps.get_version.outputs.version }}
      short_sha: ${{ steps.get_commit.outputs.sha_short }}
    steps:
      - name: ⬇️ Checkout repo
        uses: actions/checkout@v3

      - name: 🆚 Get the version
        id: get_version
        run: |
          IMAGE_TAG="${GITHUB_REF#refs/tags/}"
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            echo "IMAGE_TAG=${IMAGE_TAG}"
          elif [[ $GITHUB_REF == refs/heads/* ]]; then
            IMAGE_TAG="${GITHUB_REF#refs/heads/}"
            echo "IMAGE_TAG=${IMAGE_TAG}"
          else
            echo "Invalid reference: ${GITHUB_REF}"
            exit 1
          fi
          echo ::set-output name=version::${IMAGE_TAG}

      - name: 🔢 Get the commit hash
        id: get_commit
        run: |
          echo ::set-output name=sha_short::$(echo ${{ github.sha }} | cut -c1-7)

      - name: 🐳 Build Docker Image
        run: |
          docker build -t release_build_image -f ./docker/Dockerfile .

      - name: 🐙 Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🐙 Push to GitHub Container Registry
        run: |
          docker tag release_build_image $REGISTRY/$REPOSITORY:$IMAGE_TAG
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
        env:
          REGISTRY: ghcr.io/triggerdotdev
          REPOSITORY: trigger.dev
          IMAGE_TAG: ${{ steps.get_version.outputs.version }}

      - name: 🐙 Push 'latest' to GitHub Container Registry
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          docker tag release_build_image $REGISTRY/$REPOSITORY:latest
          docker push $REGISTRY/$REPOSITORY:latest
        env:
          REGISTRY: ghcr.io/triggerdotdev
          REPOSITORY: trigger.dev

      - name: 🌐 Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::067435167850:role/GitHubAction-AssumeRoleWithAction
          aws-region: ${{ env.AWS_REGION }}

      - name: 🌐 Login to ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v1

      - name: 🌐 Push to Amazon ECR
        run: |
          docker tag release_build_image $REGISTRY/$REPOSITORY:$IMAGE_TAG
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
        env:
          REGISTRY: ${{ steps.ecr-login.outputs.registry }}
          REPOSITORY: trigger.dev
          IMAGE_TAG: ${{ steps.get_version.outputs.version }}

      - name: 🌐 Push 'latest' to Amazon ECR
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          docker tag release_build_image $REGISTRY/$REPOSITORY:latest
          docker push $REGISTRY/$REPOSITORY:latest
        env:
          REGISTRY: ${{ steps.ecr-login.outputs.registry }}
          REPOSITORY: trigger.dev

      - name: 🌐 Push commit hash to Amazon ECR
        if: startsWith(github.ref, 'refs/heads/')
        run: |
          docker tag release_build_image $REGISTRY/$REPOSITORY:$IMAGE_TAG
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
        env:
          REGISTRY: ${{ steps.ecr-login.outputs.registry }}
          REPOSITORY: trigger.dev
          IMAGE_TAG: ${{ steps.get_version.outputs.version }}-${{ steps.get_commit.outputs.sha_short }}

      - name: 🚀 Trigger Test Deploy
        if: github.ref == 'refs/heads/main' && github.event_name == 'push' && github.repository == 'triggerdotdev/trigger.dev'
        env:
          DEPLOY_TEST_HOOK: ${{ secrets.DEPLOY_TEST_HOOK }}
        run: |
          curl -X POST $DEPLOY_TEST_HOOK
