datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  output          = "../node_modules/.prisma/client"
  binaryTargets   = ["native", "debian-openssl-1.1.x"]
  previewFeatures = ["orderByNulls"]
}

model User {
  id    String @id @default(cuid())
  email String @unique

  authenticationMethod      AuthenticationMethod
  accessToken               String?
  authenticationProfile     Json?
  authenticationExtraParams Json?

  displayName String?
  name        String?
  avatarUrl   String?

  admin             Boolean @default(false)
  isOnCloudWaitlist Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  featureCloud           Boolean @default(false)
  isOnHostedRepoWaitlist Boolean @default(false)

  orgMemberships OrgMember[]
}

enum AuthenticationMethod {
  GITHUB
  MAGIC_LINK
}

model Organization {
  id    String @id @default(cuid())
  slug  String @unique
  title String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  environments   RuntimeEnvironment[]
  apiConnections ApiConnection[]
  endpoints      Endpoint[]
  jobs           Job[]
  jobVersions    JobVersion[]
  events         EventRecord[]
  jobRuns        JobRun[]

  jobEventRule      JobTrigger[]
  projects          Project[]
  members           OrgMember[]
  externalAccounts  ExternalAccount[]
  connectionClients ApiConnectionClient[]
  sources           TriggerSource[]
}

model ExternalAccount {
  id         String @id @default(cuid())
  identifier String
  metadata   Json?

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  organizationId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  connections ApiConnection[]
  triggers    JobTrigger[]

  @@unique([organizationId, identifier])
}

model ApiConnectionClient {
  id String @id @default(cuid())

  title String
  slug  String

  schema Json

  scopes String[]

  credentialsReference   SecretReference? @relation(fields: [credentialsReferenceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  credentialsReferenceId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  organizationId String

  attempts       ApiConnectionAttempt[]
  connections    ApiConnection[]
  jobConnections JobConnection[]
  sources        TriggerSource[]

  @@unique([organizationId, slug])
}

model ApiConnection {
  id String @id @default(cuid())

  expiresAt DateTime?
  metadata  Json

  dataReference   SecretReference @relation(fields: [dataReferenceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  dataReferenceId String

  client   ApiConnectionClient @relation(fields: [clientId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  clientId String

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  organizationId String

  connectionType ApiConnectionType @default(DEVELOPER)

  externalAccount   ExternalAccount? @relation(fields: [externalAccountId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  externalAccountId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  runConnections RunConnection[]
}

enum ApiConnectionType {
  EXTERNAL
  DEVELOPER
}

model ApiConnectionAttempt {
  id String @id @default(cuid())

  securityCode String?

  redirectTo String @default("/")

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  client   ApiConnectionClient @relation(fields: [clientId], references: [id])
  clientId String
}

model OrgMember {
  id String @id @default(cuid())

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  organizationId String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  role OrgMemberRole @default(MEMBER)

  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
  environments RuntimeEnvironment[]

  @@unique([organizationId, userId])
}

enum OrgMemberRole {
  ADMIN
  MEMBER
}

model RuntimeEnvironment {
  id     String @id @default(cuid())
  slug   String
  apiKey String @unique

  type RuntimeEnvironmentType @default(DEVELOPMENT)

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  organizationId String

  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  projectId String

  orgMember   OrgMember? @relation(fields: [orgMemberId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orgMemberId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  endpoints         Endpoint[]
  jobVersions       JobVersion[]
  events            EventRecord[]
  jobRuns           JobRun[]
  requestDeliveries HttpSourceRequestDelivery[]
  jobEventRules     JobTrigger[]
  jobAliases        JobAlias[]
  JobQueue          JobQueue[]
  sources           TriggerSource[]

  @@unique([projectId, slug, orgMemberId])
}

enum RuntimeEnvironmentType {
  PRODUCTION
  STAGING
  DEVELOPMENT
  PREVIEW
}

model Project {
  id   String @id @default(cuid())
  name String

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  organizationId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  environments RuntimeEnvironment[]
  endpoints    Endpoint[]
  jobs         Job[]
  jobVersion   JobVersion[]
  events       EventRecord[]
  runs         JobRun[]
  triggers     JobTrigger[]
  sources      TriggerSource[]
}

model Endpoint {
  id   String @id @default(cuid())
  slug String
  url  String

  environment   RuntimeEnvironment @relation(fields: [environmentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  environmentId String

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  organizationId String

  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  projectId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  jobVersions           JobVersion[]
  jobRuns               JobRun[]
  httpRequestDeliveries HttpSourceRequestDelivery[]
  dynamictriggers       DynamicTrigger[]
  sources               TriggerSource[]

  @@unique([environmentId, slug])
}

model Job {
  id       String  @id @default(cuid())
  slug     String
  title    String
  internal Boolean @default(false)

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  organizationId String

  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  projectId String

  versions        JobVersion[]
  runs            JobRun[]
  connections     JobConnection[]
  triggers        JobTrigger[]
  aliases         JobAlias[]
  dynamicTriggers DynamicTrigger[]

  @@unique([projectId, slug])
}

model JobVersion {
  id                 String @id @default(cuid())
  version            String
  eventSpecification Json

  job   Job    @relation(fields: [jobId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  jobId String

  endpoint   Endpoint @relation(fields: [endpointId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  endpointId String

  environment   RuntimeEnvironment @relation(fields: [environmentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  environmentId String

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  organizationId String

  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  projectId String

  queue   JobQueue @relation(fields: [queueId], references: [id])
  queueId String

  ready    Boolean @default(false)
  latest   Boolean @default(false)
  prepare  Boolean @default(false)
  prepared Boolean @default(false)

  startPosition JobStartPosition @default(INITIAL)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  runs        JobRun[]
  connections JobConnection[]
  triggers    JobTrigger[]
  aliases     JobAlias[]

  @@unique([jobId, version, endpointId])
}

model JobQueue {
  id   String @id @default(cuid())
  name String

  environment   RuntimeEnvironment @relation(fields: [environmentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  environmentId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  jobCount Int @default(0)
  maxJobs  Int @default(100)

  runs       JobRun[]
  jobVersion JobVersion[]

  @@unique([environmentId, name])
}

model JobAlias {
  id    String @id @default(cuid())
  name  String @default("latest")
  value String

  version   JobVersion @relation(fields: [versionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  versionId String

  job   Job    @relation(fields: [jobId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  jobId String

  environment   RuntimeEnvironment @relation(fields: [environmentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  environmentId String

  @@unique([jobId, environmentId, name])
}

model JobConnection {
  id  String @id @default(cuid())
  key String

  version   JobVersion @relation(fields: [versionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  versionId String

  job   Job    @relation(fields: [jobId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  jobId String

  connectionMetadata Json

  apiConnectionClient   ApiConnectionClient @relation(fields: [apiConnectionClientId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  apiConnectionClientId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([versionId, key])
}

model RunConnection {
  id  String @id @default(cuid())
  key String

  run   JobRun @relation(fields: [runId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  runId String

  apiConnection   ApiConnection @relation(fields: [apiConnectionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  apiConnectionId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([runId, key])
}

model DynamicTrigger {
  id   String @id @default(cuid())
  slug String

  endpoint   Endpoint @relation(fields: [endpointId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  endpointId String

  jobs Job[]

  @@unique([endpointId, slug])
}

model JobTrigger {
  id            String @id @default(cuid())
  event         String
  source        String
  payloadFilter Json?
  contextFilter Json?

  action           JobTriggerAction @default(CREATE_RUN)
  actionIdentifier String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  enabled Boolean @default(true)

  job   Job    @relation(fields: [jobId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  jobId String

  version   JobVersion @relation(fields: [versionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  versionId String

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  organizationId String

  environment   RuntimeEnvironment @relation(fields: [environmentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  environmentId String

  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  projectId String

  externalAccount   ExternalAccount? @relation(fields: [externalAccountId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  externalAccountId String?

  @@unique([versionId, actionIdentifier])
}

enum JobStartPosition {
  INITIAL
  LATEST
}

enum JobTriggerAction {
  CREATE_RUN
  RESUME_TASK
}

model EventRecord {
  id        String   @id @default(cuid())
  name      String
  timestamp DateTime @default(now())
  payload   Json
  context   Json?

  source String @default("trigger.dev")

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  organizationId String

  environment   RuntimeEnvironment @relation(fields: [environmentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  environmentId String

  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  projectId String

  deliverAt   DateTime  @default(now())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deliveredAt DateTime?

  isTest Boolean  @default(false)
  runs   JobRun[]
}

model JobRun {
  id     String @id @default(cuid())
  number Int

  job   Job    @relation(fields: [jobId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  jobId String

  version   JobVersion @relation(fields: [versionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  versionId String

  event   EventRecord @relation(fields: [eventId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  eventId String

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  organizationId String

  endpoint   Endpoint @relation(fields: [endpointId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  endpointId String

  environment   RuntimeEnvironment @relation(fields: [environmentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  environmentId String

  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  projectId String

  queue   JobQueue @relation(fields: [queueId], references: [id])
  queueId String

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  queuedAt    DateTime?
  startedAt   DateTime?
  completedAt DateTime?

  elements Json?

  status JobRunStatus @default(PENDING)
  output Json?

  timedOutAt     DateTime?
  timedOutReason String?

  isTest Boolean @default(false)

  tasks          Task[]
  runConnections RunConnection[]
}

enum JobRunStatus {
  PENDING
  QUEUED
  STARTED
  SUCCESS
  FAILURE
  TIMED_OUT
}

model Task {
  id             String  @id
  idempotencyKey String
  displayKey     String?
  name           String
  icon           String?

  status     TaskStatus @default(PENDING)
  delayUntil DateTime?
  noop       Boolean    @default(false)

  description String?
  elements    Json?
  params      Json?
  output      Json?
  error       String?
  redact      Json?

  startedAt   DateTime?
  completedAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  run   JobRun @relation(fields: [runId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  runId String

  parent   Task?   @relation("TaskParent", fields: [parentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  parentId String?

  children Task[] @relation("TaskParent")

  @@unique([runId, idempotencyKey])
}

enum TaskStatus {
  PENDING
  WAITING
  RUNNING
  COMPLETED
  ERRORED
}

model SecretReference {
  id       String @id @default(cuid())
  key      String @unique
  provider String

  apiConnections       ApiConnection[]
  apiConnectionClients ApiConnectionClient[]
  triggerSources       TriggerSource[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

/// Used when the provider = "database". Not recommended outside of local development. */
model SecretStore {
  key   String @unique
  value Json

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TriggerSource {
  id String @id @default(cuid())

  key String

  params Json?

  channel     TriggerChannel @default(HTTP)
  channelData Json?

  events TriggerSourceEvent[]

  secretReference   SecretReference @relation(fields: [secretReferenceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  secretReferenceId String

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  organizationId String

  environment   RuntimeEnvironment @relation(fields: [environmentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  environmentId String

  endpoint   Endpoint @relation(fields: [endpointId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  endpointId String

  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  projectId String

  apiClient   ApiConnectionClient? @relation(fields: [apiClientId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  apiClientId String?

  active      Boolean @default(false)
  interactive Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  httpDeliveries HttpSourceRequestDelivery[]

  @@unique([key, endpointId])
}

enum TriggerChannel {
  HTTP
  SQS
  SMTP
}

model TriggerSourceEvent {
  id   String @id @default(cuid())
  name String

  source   TriggerSource @relation(fields: [sourceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  sourceId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  registered Boolean @default(false)

  @@unique([name, sourceId])
}

model HttpSourceRequestDelivery {
  id      String @id @default(cuid())
  url     String
  method  String
  headers Json
  body    Bytes?

  source   TriggerSource @relation(fields: [sourceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  sourceId String

  endpoint   Endpoint @relation(fields: [endpointId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  endpointId String

  environment   RuntimeEnvironment @relation(fields: [environmentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  environmentId String

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deliveredAt DateTime?
}
