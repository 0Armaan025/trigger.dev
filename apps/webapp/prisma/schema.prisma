datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  output        = "../node_modules/.prisma/client"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

model User {
  id    String @id @default(cuid())
  email String @unique

  authenticationMethod      AuthenticationMethod
  accessToken               String?
  authenticationProfile     Json?
  authenticationExtraParams Json?

  displayName String?
  name        String?
  avatarUrl   String?

  admin Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  organizations Organization[]
}

enum AuthenticationMethod {
  GITHUB
  MAGIC_LINK
}

model Organization {
  id    String @id @default(cuid())
  slug  String @unique
  title String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users           User[]
  workflows       Workflow[]
  environments    RuntimeEnvironment[]
  apiConnections  APIConnection[]
  events          TriggerEvent[]
  externalSources ExternalSource[]
  eventRules      EventRule[]
}

model APIConnection {
  id    String @id @default(cuid())
  title String

  apiIdentifier String
  status        APIConnectionStatus @default(CREATED)
  scopes        String[]
  type          APIConnectionType

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  organizationId String

  externalSources ExternalSource[]
}

enum APIConnectionType {
  HTTP
  GRAPHQL
}

enum APIConnectionStatus {
  CREATED
  CONNECTED
}

model RuntimeEnvironment {
  id     String @id @default(cuid())
  slug   String
  apiKey String @unique

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  organizationId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  events     TriggerEvent[]
  runs       WorkflowRun[]
  eventRules EventRule[]

  @@unique([organizationId, slug])
}

model Workflow {
  id    String @id @default(cuid())
  slug  String
  title String

  packageJson Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  organizationId String

  type   TriggerType
  status WorkflowStatus @default(CREATED)

  externalSource   ExternalSource? @relation(fields: [externalSourceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  externalSourceId String?

  runs  WorkflowRun[]
  rules EventRule[]

  @@unique([organizationId, slug])
}

model EventRule {
  id String @id @default(cuid())

  type TriggerType

  workflow   Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  workflowId String

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  organizationId String

  environment   RuntimeEnvironment @relation(fields: [environmentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  environmentId String

  filter  Json
  trigger Json

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  runs WorkflowRun[]

  @@unique([workflowId, environmentId])
}

enum TriggerType {
  WEBHOOK
  SCHEDULE
  CUSTOM_EVENT
  HTTP_ENDPOINT
  EVENT_BRIDGE
  HTTP_POLLING
}

enum WorkflowStatus {
  CREATED
  READY
}

model ExternalSource {
  id String @id @default(cuid())

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  organizationId String

  service String

  workflows    Workflow[]
  type         ExternalSourceType
  key          String
  source       Json
  status       ExternalSourceStatus @default(CREATED)
  externalData Json?
  secret       String?

  readyAt   DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  connection   APIConnection? @relation(fields: [connectionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  connectionId String?

  @@unique([organizationId, key])
}

enum ExternalSourceStatus {
  CREATED
  READY
}

enum ExternalSourceType {
  WEBHOOK
  EVENT_BRIDGE
  HTTP_POLLING
}

model TriggerEvent {
  id        String      @id @default(cuid())
  service   String
  name      String
  type      TriggerType
  timestamp DateTime    @default(now())
  payload   Json
  context   Json?

  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  organizationId String?

  environment   RuntimeEnvironment? @relation(fields: [environmentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  environmentId String?

  status      TriggerEventStatus @default(PENDING)
  WorkflowRun WorkflowRun[]

  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  dispatchedAt DateTime?

  isTest Boolean @default(false)
}

enum TriggerEventStatus {
  PENDING
  DISPATCHED
}

model WorkflowRun {
  id String @id @default(cuid())

  workflow   Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  workflowId String

  environment   RuntimeEnvironment @relation(fields: [environmentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  environmentId String

  eventRule   EventRule @relation(fields: [eventRuleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  eventRuleId String

  tasks WorkflowRunStep[]

  event   TriggerEvent @relation(fields: [eventId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  eventId String

  error Json?

  status WorkflowRunStatus @default(PENDING)

  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  startedAt  DateTime?
  finishedAt DateTime?

  isTest Boolean @default(false)
}

enum WorkflowRunStatus {
  PENDING
  RUNNING
  SUCCESS
  ERROR
}

model WorkflowRunStep {
  id String @id @default(cuid())

  run   WorkflowRun @relation(fields: [runId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  runId String

  type    WorkflowRunStepType
  input   Json?
  output  Json?
  context Json

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  startedAt  DateTime?
  finishedAt DateTime?
}

enum WorkflowRunStepType {
  OUTPUT
  LOG_MESSAGE
  DURABLE_DELAY
  CUSTOM_EVENT
}

//todo triggers are environment specific
//todo connections are shared between environments
//todo in the future, connections can be override per environment
//todo runs are environment specific
//todo Workflows have connection slots, which are filled with connections (can be empty)
//todo Workflow has one trigger (can also have a slot with connection)
//todo WorkflowRuns belong to a workflow + environment
