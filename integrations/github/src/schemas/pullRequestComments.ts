import { z } from "zod";
import {
  userSchema,
  teamSchema,
  labelSchema,
  milestoneSchema,
  repositorySchema,
  linkSchema,
  authorAssociationSchema,
  installationLiteSchema,
  organizationSchema,
  reactionsSchema,
  pullRequestAutoMergeSchema,
} from "./shared";

export const pullRequestReviewCommentSchema = z.object({
  url: z.string(),
  pull_request_review_id: z.number(),
  id: z.number(),
  node_id: z.string(),
  diff_hunk: z.string(),
  path: z.string(),
  position: z.number().nullish(),
  original_position: z.number(),
  commit_id: z.string(),
  original_commit_id: z.string(),
  user: userSchema,
  body: z.string(),
  created_at: z.string(),
  updated_at: z.string(),
  html_url: z.string(),
  pull_request_url: z.string(),
  author_association: authorAssociationSchema,
  _links: z.object({
    self: linkSchema,
    html: linkSchema,
    pull_request: linkSchema,
  }),
  reactions: reactionsSchema.nullish(),
  start_line: z.number().nullish(),
  original_start_line: z.number().nullish(),
  start_side: z.union([z.literal("LEFT"), z.literal("RIGHT")]).nullish(),
  line: z.number().nullish(),
  original_line: z.number().nullish(),
  side: z.union([z.literal("LEFT"), z.literal("RIGHT")]).nullish(),
  in_reply_to_id: z.number().optional(),
});

export const pullRequestReviewCommentCreatedEventSchema = z.object({
  action: z.literal("created"),
  comment: pullRequestReviewCommentSchema,
  pull_request: z.object({
    url: z.string(),
    id: z.number(),
    node_id: z.string(),
    html_url: z.string(),
    diff_url: z.string(),
    patch_url: z.string(),
    issue_url: z.string(),
    number: z.number(),
    state: z.union([z.literal("open"), z.literal("closed")]),
    locked: z.boolean(),
    title: z.string(),
    user: userSchema,
    body: z.string().nullish(),
    created_at: z.string(),
    updated_at: z.string(),
    closed_at: z.string().nullish(),
    merged_at: z.string().nullish(),
    merge_commit_sha: z.string().nullish(),
    assignee: userSchema.nullish(),
    assignees: z.array(userSchema),
    requested_reviewers: z.array(z.union([userSchema, teamSchema])),
    requested_teams: z.array(teamSchema),
    labels: z.array(labelSchema),
    milestone: milestoneSchema.nullish(),
    draft: z.boolean().optional(),
    commits_url: z.string(),
    review_comments_url: z.string(),
    review_comment_url: z.string(),
    comments_url: z.string(),
    statuses_url: z.string(),
    head: z.object({
      label: z.string(),
      ref: z.string(),
      sha: z.string(),
      user: userSchema,
      repo: repositorySchema,
    }),
    base: z.object({
      label: z.string(),
      ref: z.string(),
      sha: z.string(),
      user: userSchema,
      repo: repositorySchema,
    }),
    _links: z.object({
      self: linkSchema,
      html: linkSchema,
      issue: linkSchema,
      comments: linkSchema,
      review_comments: linkSchema,
      review_comment: linkSchema,
      commits: linkSchema,
      statuses: linkSchema,
    }),
    auto_merge: pullRequestAutoMergeSchema.optional().nullish(),
    author_association: authorAssociationSchema,
    active_lock_reason: z
      .union([
        z.literal("resolved"),
        z.literal("off-topic"),
        z.literal("too heated"),
        z.literal("spam"),
      ])
      .nullish(),
  }),
  repository: repositorySchema,
  installation: installationLiteSchema.optional(),
  organization: organizationSchema.optional(),
  sender: userSchema,
});

export const pullRequestReviewCommentDeletedEventSchema = z.object({
  action: z.literal("deleted"),
  comment: pullRequestReviewCommentSchema,
  pull_request: z.object({
    url: z.string(),
    id: z.number(),
    node_id: z.string(),
    html_url: z.string(),
    diff_url: z.string(),
    patch_url: z.string(),
    issue_url: z.string(),
    number: z.number(),
    state: z.union([z.literal("open"), z.literal("closed")]),
    locked: z.boolean(),
    title: z.string(),
    user: userSchema,
    body: z.string().nullish(),
    created_at: z.string(),
    updated_at: z.string(),
    closed_at: z.string().nullish(),
    merged_at: z.string().nullish(),
    merge_commit_sha: z.string().nullish(),
    assignee: userSchema.nullish(),
    assignees: z.array(userSchema),
    requested_reviewers: z.array(z.union([userSchema, teamSchema])),
    requested_teams: z.array(teamSchema),
    labels: z.array(labelSchema),
    milestone: milestoneSchema.nullish(),
    draft: z.boolean().optional(),
    commits_url: z.string(),
    review_comments_url: z.string(),
    review_comment_url: z.string(),
    comments_url: z.string(),
    statuses_url: z.string(),
    head: z.object({
      label: z.string(),
      ref: z.string(),
      sha: z.string(),
      user: userSchema,
      repo: repositorySchema,
    }),
    base: z.object({
      label: z.string(),
      ref: z.string(),
      sha: z.string(),
      user: userSchema,
      repo: repositorySchema,
    }),
    _links: z.object({
      self: linkSchema,
      html: linkSchema,
      issue: linkSchema,
      comments: linkSchema,
      review_comments: linkSchema,
      review_comment: linkSchema,
      commits: linkSchema,
      statuses: linkSchema,
    }),
    auto_merge: pullRequestAutoMergeSchema.optional().nullish(),
    author_association: authorAssociationSchema,
    active_lock_reason: z
      .union([
        z.literal("resolved"),
        z.literal("off-topic"),
        z.literal("too heated"),
        z.literal("spam"),
      ])
      .nullish(),
  }),
  repository: repositorySchema,
  installation: installationLiteSchema.optional(),
  organization: organizationSchema.optional(),
  sender: userSchema,
});

export const pullRequestReviewCommentEditedEventSchema = z.object({
  action: z.literal("edited"),
  changes: z.object({
    body: z
      .object({
        from: z.string(),
      })
      .optional(),
  }),
  comment: pullRequestReviewCommentSchema,
  pull_request: z.object({
    url: z.string(),
    id: z.number(),
    node_id: z.string(),
    html_url: z.string(),
    diff_url: z.string(),
    patch_url: z.string(),
    issue_url: z.string(),
    number: z.number(),
    state: z.union([z.literal("open"), z.literal("closed")]),
    locked: z.boolean(),
    title: z.string(),
    user: userSchema,
    body: z.string().nullish(),
    created_at: z.string(),
    updated_at: z.string(),
    closed_at: z.string().nullish(),
    merged_at: z.string().nullish(),
    merge_commit_sha: z.string().nullish(),
    assignee: userSchema.nullish(),
    assignees: z.array(userSchema),
    requested_reviewers: z.array(z.union([userSchema, teamSchema])),
    requested_teams: z.array(teamSchema),
    labels: z.array(labelSchema),
    milestone: milestoneSchema.nullish(),
    draft: z.boolean().optional(),
    commits_url: z.string(),
    review_comments_url: z.string(),
    review_comment_url: z.string(),
    comments_url: z.string(),
    statuses_url: z.string(),
    head: z.object({
      label: z.string(),
      ref: z.string(),
      sha: z.string(),
      user: userSchema,
      repo: repositorySchema,
    }),
    base: z.object({
      label: z.string(),
      ref: z.string(),
      sha: z.string(),
      user: userSchema,
      repo: repositorySchema,
    }),
    _links: z.object({
      self: linkSchema,
      html: linkSchema,
      issue: linkSchema,
      comments: linkSchema,
      review_comments: linkSchema,
      review_comment: linkSchema,
      commits: linkSchema,
      statuses: linkSchema,
    }),
    auto_merge: pullRequestAutoMergeSchema.optional().nullish(),
    author_association: authorAssociationSchema,
    active_lock_reason: z
      .union([
        z.literal("resolved"),
        z.literal("off-topic"),
        z.literal("too heated"),
        z.literal("spam"),
      ])
      .nullish(),
  }),
  repository: repositorySchema,
  installation: installationLiteSchema.optional(),
  organization: organizationSchema.optional(),
  sender: userSchema,
});

export const pullRequestReviewCommentEventSchema = z.discriminatedUnion(
  "action",
  [
    pullRequestReviewCommentCreatedEventSchema,
    pullRequestReviewCommentDeletedEventSchema,
    pullRequestReviewCommentEditedEventSchema,
  ]
);
